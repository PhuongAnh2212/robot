#include <Adafruit_BNO055.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <HCSR04.h>

// Ultrasonic sensor pins
const int frontTrigPin = 53;
const int frontEchoPin = 52;
const int leftTrigPin = 49;
const int leftEchoPin = 48;

HCSR04 frontSonar(53, 52); //initialisation class HCSR04 (trig pin , echo pin)
HCSR04 leftSonar(49, 48); //initialisation class HCSR04 (trig pin , echo pin)
HCSR04 rightSonar(51, 50); //initialisation class HCSR04 (trig pin , echo pin)

float previousTime_sona = 0.0;
float sampling_rate_sona = 50; //don vi la miliseconds

const int obstacleThreshold = 30; // cm
const int safeDistance = 30;

volatile long leftEnCount = 0;
volatile long rightEnCount = 0;


float Kp_sona = 0.6, Ki_sona = 0.8, Kd_sona = 5.0;

// Variables for PID controller
float P_sona = 0, I_sona = 0, D_sona = 0;
float previous_error_sona = 0;
float PID_value_sona = 0;
float setpoint = 20.0;

bool isFirstTimeDetected = false; 
bool doneObstacle = false;
bool hasPassedCase2 = false; 
//_______________________________
// Motor control pins
int enL = 7; // enable the left motor driver, using PWM  
int inL1 = 8; // control direction of the left motor 
int inL2 = 9;

#define echo 51    //Echo pin
#define trigger 50 //Trigger pin
// Right Motor
int enR = 12; 
int inR1 = 10;
int inR2 = 11;

// For Encoder
int enLA = 2;  // left motor encoder
int enLB = 3;
int enRA = 18; // right motor encoder 
int enRB = 19;

//volatile int leftEncoderCount = 0;
//volatile int rightEncoderCount = 0; 
//const int targetSpeed = 40; 
const int K = 3;  // Adjust K for smooth response

// PID variables
float Kp = 4.2, Ki = 0.02, Kd = 0.5;
float sampling_rate = 0; 
float previousTime;
float error = 0, P = 0, I = 0, D = 0, PID_value = 0;
float previous_error = 0;

// Sensor array and motor speed
int sensor[5] = {0, 0, 0, 0, 0};
int initial_motor_speed = 50;

// Function prototypes
void read_sensor_values(void);
void calculate_pid(void);
void motor_control(void);
void setup();
void loop();

void setup() {
  
  Serial.begin(9600);
  previousTime = 0; 
  pinMode(enL, OUTPUT);
  pinMode(enR, OUTPUT);
  pinMode(inL1, OUTPUT);
  pinMode(inL2, OUTPUT);
  pinMode(inR1, OUTPUT);
  pinMode(inR2, OUTPUT);
  
  // Initialize motor direction (forward)
  digitalWrite(inL1, HIGH);
  digitalWrite(inL2, LOW);
  digitalWrite(inR1, LOW);
  digitalWrite(inR2, HIGH);
}
void stop(){
  digitalWrite(inL1, LOW);
  digitalWrite(inL2, LOW);
  digitalWrite(inR1, LOW);
  digitalWrite(inR2, LOW);
}
//_____________________________________
enum RobotState {
  LineFollower,
  AvoidObstacle,
  BacktotheLine
};

RobotState currentState = LineFollower;



void loop() {
  switch (currentState){
    case LineFollower:
        checkPIDState();
        break;
        Serial.println("PID IRs State");

    case AvoidObstacle:
        
        checkAvoidObstacleState();
        break;
        Serial.println("Obstacle State");

     case BacktotheLine:
      checkLineStatus();
     Serial.println("Back to the Line State");
  }

}

//*********************************************
void checkLineStatus(){
      Serial.println("LOL");

  if (hasPassedCase2){
  if (lineDetectedbyIRs() && !isFirstTimeDetected){
    Serial.println("LMAO");
    delay(5000);
//    moveForward_encoder(0.01);
    
    hardcode_turnAround();
    isFirstTimeDetected = true; 
    
    
    }
    
  }else{
    currentState = LineFollower;
  }
}


bool lineDetectedbyIRs(){
  for (int i = 0; i < 5; i++) {
    sensor[i] = digitalRead(A0 + i);
//    if (sensor[0]==1 || sensor[1]==1 || sensor[2]==1 || sensor[3]==1 || sensor[4]==1 ){
if (sensor[i]== 1 ){
      return true; 
    }
  }
      return false;

}

int calculateTargetCounts(float distance_en) {
  const int encoderCountsPerRevolution = 500; // 1:50 encoder with 7 pulses per revolution
  const float wheelDiameter = 0.0225 * 2; // Diameter of the wheel in meters
  const float wheelCircumference = wheelDiameter * M_PI; // Wheel circumference
  return (distance_en / wheelCircumference) * encoderCountsPerRevolution;
}


void moveForward_encoder(float distance_en) {
  int targetCounts = calculateTargetCounts(distance_en);
  leftEnCount = 0; // Reset encoder counts
  rightEnCount = 0;

  // Set direction for moving forward
  digitalWrite(inL1, HIGH);
  digitalWrite(inL2, LOW);
  digitalWrite(inR1, LOW);
  digitalWrite(inR2, HIGH);

  // Start moving forward
  analogWrite(enL, 55);  // Use initial speed
  analogWrite(enR, 55);  // Use initial speed

  // Wait until the robot has moved the target distance
  while (leftEnCount < targetCounts && rightEnCount < targetCounts) {
    // Optionally add obstacle checking code here
  }

  // Stop motors after moving forward
  stop();
}

void hardcode_turnAround(){
    Serial.print("di chua");
    analogWrite(enR, 50);
    analogWrite(enL, 50);
    digitalWrite(inL1, HIGH);
    digitalWrite(inL2, LOW);
    digitalWrite(inR1, HIGH);
    digitalWrite(inR2, LOW);

    if (lineDetectedbyIRs() && isFirstTimeDetected){
      delay(3000);
      currentState = LineFollower; 
      
      
    }
    
    Serial.print("Turn Around to find the line");

}



void checkAvoidObstacleState() {
    // Turn right to avoid the obstacle
    hardcode_turnRight();
    delay(1000);  // Allow time for the turn

    // Call PID controller to adjust left and right motors based on sonar readings
    read_sona_values();  // This function will handle PID adjustments
    // Check again for obstacles after adjustment
    
    if (!ObstacleFront() && lineDetectedbyIRs() ) {
        hasPassedCase2 = true; 
        currentState = BacktotheLine;  // Return to normal state if no obstacles are detected
      
    }
    
}
void checkPIDState() {
    Serial.println("Loop is running."); // This will print repeatedly

    // Move forward at a specified speed
    read_sensor_values();
    motor_control();
    
    // Check for obstacles in front
    if (ObstacleFront()) {
        Serial.println("Obstacle detected, switching to AvoidObstacle state.");
        currentState = AvoidObstacle;  // Transition to avoid obstacle state
    }
}


void hardcode_turnRight(){
    analogWrite(enR, 50);
    analogWrite(enL, 60);
    digitalWrite(inL1, HIGH);
    digitalWrite(inL2, LOW);
    digitalWrite(inR1, LOW);
    digitalWrite(inR2, HIGH);
    
    Serial.print("Turn Right 90 degrees hardcode");

}



bool ObstacleFront() {
  long distanceFront = get_front_distance();
  return distanceFront < obstacleThreshold; // Return true if obstacle is detected
}



float get_front_distance() {
  float distance = frontSonar.dist();
  if (distance == 0.0) {
    distance = 200.0;

  }
  return distance;

}

float get_left_distance(){
  float distance = leftSonar.dist();
  if (distance == 0.0) {
    distance = 200.0;
    
  }
  return distance; 
  
}


void read_sona_values() {
  //  float currentTime_sona = millis();


  // Get distance values from left and right sonar sensors
  long distanceLeft = get_left_distance();
//  long distanceRight = get_right_distance();

  Serial.println("Distance Left:");
  Serial.println(distanceLeft);

  // Check if there are obstacles and calculate PID if needed
  if (distanceLeft < safeDistance) {
    float error_sona = safeDistance - distanceLeft -1; // Error = difference in distances
    float pid = calculate_pid_sona(error_sona); // Call the PID controller with the calculated error
    motor_control_sona(PID_value_sona);
    Serial.println("meowssssss");

  }
  else if (distanceLeft >= safeDistance) {
    float error_sona = distanceLeft - safeDistance +1; // Error = difference in distances
    float pid = calculate_pid_sona(error_sona); // Call the PID controller with the calculated error
    motor_control_sona(pid);
    Serial.println("ssssssswoem");

  }
}

void motor_control_sona(float PID_value_sona) {
  // Calculating the effective motor speed:
  int left_motor_speed = abs(initial_motor_speed - (PID_value_sona/100));
  int right_motor_speed = abs(initial_motor_speed + (PID_value_sona/100));

  left_motor_speed = constrain(left_motor_speed, 20, 60);
  right_motor_speed = constrain(right_motor_speed, 20, 60);

  digitalWrite(inL1, HIGH);
  digitalWrite(inL2, LOW);
  digitalWrite(inR1, LOW);
  digitalWrite(inR2, HIGH);


  analogWrite(enL, left_motor_speed);  // Set left motor speed
  analogWrite(enR, right_motor_speed); // Set right motor speed

  Serial.println("left:");
  Serial.println(left_motor_speed);
  Serial.println("right");
  Serial.print(right_motor_speed);

}

float calculate_pid_sona(float error_sona) {
  P_sona = error_sona;
  I_sona += error_sona;
  D_sona = error_sona - previous_error_sona;

  PID_value_sona = (Kp_sona * P_sona) + (Ki_sona * I_sona) + (Kd_sona * D_sona);
  previous_error_sona = error_sona;
  Serial.println("PID value:");
  Serial.println(PID_value_sona);


  return PID_value_sona;
}



//__________________________
void read_sensor_values() {
  float currentTime = millis();
  if (currentTime - previousTime >= sampling_rate){
    for (int i = 0; i < 5; i++) {
    sensor[i] = digitalRead(A0 + i); // Assume sensors are connected to A0 to A4
  }
  //phai sang, 1 den don sang 
  if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 0) && (sensor[4] == 0)){ //00100
    error = 0;
     calculate_pid(error);}
  else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 1) && (sensor[4] == 0)){ //00010
    error = 2; 
    calculate_pid(error);}
   else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 0) && (sensor[4] == 1)){ //00001
    error = 5; 
    calculate_pid(error);}
   //phai sang, truong hop 2 den sang
   else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 1) && (sensor[4] == 0)){ //00110
    error = 2; 
    calculate_pid(error);}
   else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 1) && (sensor[4] == 1)){ //00011
    error = 3; 
    calculate_pid(error);}
    else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 1) && (sensor[4] == 1)){ //00101
    error = 3; 
    calculate_pid(error);}

    //trai sang, 1 den don sang
    else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 0) && (sensor[3] == 0) && (sensor[4] == 0)){ //01000
    error = -2; 
    calculate_pid(error);}
    else if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 0) && (sensor[4] == 0)){ //10000
    error = -5; 
    calculate_pid(error);}

    //trai sang, 2 den don sang
     else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 0) && (sensor[4] == 0)){ //01100
    error = -1; 
    calculate_pid(error);}
    else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 0) && (sensor[3] == 0) && (sensor[4] == 0)){ //11000
    error = -3; 
    calculate_pid(error);}
    else if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 0) && (sensor[4] == 0)){ //10100
    error = -3; 
    calculate_pid(error);}

    else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 1) && (sensor[4] == 1)){ //11111
    stop();}
      
    previousTime = currentTime; 
  }
  
   
     
//    if ((error == -4) || (error == -5)) {
//      error = -5;
//      calculate_pid(error);
//      //count = count + 1;
//    } else if ((error == 4) || (error == 5)) {
//      error = 5;
//      calculate_pid(error);
      // count = count + 1;
//    }
//  }

}

void calculate_pid(float error) {
  P = error;
  I += error;
  D = error - previous_error;
  
  PID_value = (Kp * P) + (Ki * I) + (Kd * D);
  previous_error = error;
}

void motor_control() {

  // Calculate the effective motor speed based on PID
  int left_motor_speed = initial_motor_speed + PID_value;
  int right_motor_speed = initial_motor_speed - PID_value;

  // Constrain motor speeds
  left_motor_speed = constrain(left_motor_speed, 0, 150);
  right_motor_speed = constrain(right_motor_speed, 0, 150);

  analogWrite(enL, left_motor_speed);  // Set left motor speed
  analogWrite(enR, right_motor_speed); // Set right motor speed

  Serial.print("Left Speed: "); Serial.print(left_motor_speed);
  Serial.print(" | Right Speed: "); Serial.println(right_motor_speed);
}

void pid_line_follow() {
  read_sensor_values();
  motor_control();
}
