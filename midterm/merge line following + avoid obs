#include <Adafruit_BNO055.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <HCSR04.h>

// Motor control pins
int enL = 7; 
int inL1 = 8; 
int inL2 = 9;

int enR = 12; 
int inR1 = 10;
int inR2 = 11;

// Ultrasonic sensor pins
const int frontTrigPin = 53;
const int frontEchoPin = 52;
const int leftTrigPin = 49;
const int leftEchoPin = 48;
const int rightTrigPin = 51;
const int rightEchoPin = 50;

const int obstacleThreshold = 30; // cm
const int safeDistance = 20; 

const int enLA = 2;
const int enLB = 3;
const int enRA = 18;
const int enRB = 19;

float Kp_sona = 1.2, Ki_sona = 0.1, Kd_sona = 0.5;

// Variables for PID controller
float P_sona = 0, I_sona = 0, D_sona = 0;
float previous_error_sona = 0;
float PID_value_sona = 0;
float setpoint = 20.0;

float previousTime_sona = 0.0;
float sampling_rate_sona = 50; //don vi la miliseconds

// PID variables
float Kp = 4.5, Ki = 0.02, Kd = 0.5;
float sampling_rate = 0; 
float previousTime;
float error = 0, P = 0, I = 0, D = 0, PID_value = 0;
float previous_error = 0;

// Sensor array and motor speed
int sensor[5] = {0, 0, 0, 0, 0};


int initial_motor_speed = 55;


// Encoder counts
volatile long leftEnCount = 0;
volatile long rightEnCount = 0;
const int K = 30; 

// IMU setup
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x29, &Wire);
float currentAngle = 0.0;

HCSR04 frontSonar(53, 52); //initialisation class HCSR04 (trig pin , echo pin)
HCSR04 leftSonar(49, 48); //initialisation class HCSR04 (trig pin , echo pin)
HCSR04 rightSonar(51, 50); //initialisation class HCSR04 (trig pin , echo pin)

enum RobotState {
    LineFollowing,
    AvoidObstacle,
};

RobotState currentState = LineFollowing;


void setup() {
  Serial.begin(9600);
  Serial.println("Setup is complete."); // This will print to the Serial Monitor

  // Initialize IMU
  if (!bno.begin()) {
      Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
      while (1);
  }
  bno.setExtCrystalUse(true);

  // Set motor pins as output
  pinMode(enL, OUTPUT);
  pinMode(enR, OUTPUT);
  pinMode(inL1, OUTPUT);
  pinMode(inL2, OUTPUT);
  pinMode(inR1, OUTPUT);
  pinMode(inR2, OUTPUT);
  
  // Set ultrasonic pins
  pinMode(frontTrigPin, OUTPUT);
  pinMode(frontEchoPin, INPUT);
  pinMode(leftTrigPin, OUTPUT);
  pinMode(leftEchoPin, INPUT);

  // Set encoder pins
  pinMode(enLA, INPUT);
  pinMode(enLB, INPUT);
  pinMode(enRA, INPUT);
  pinMode(enRB, INPUT);

  // Attach interrupts for encoders
  attachInterrupt(digitalPinToInterrupt(enLA), leftEnISR, RISING);
  attachInterrupt(digitalPinToInterrupt(enLB), leftEnISR, RISING);
  attachInterrupt(digitalPinToInterrupt(enRA), rightEnISR, RISING);
  attachInterrupt(digitalPinToInterrupt(enRB), rightEnISR, RISING);

  stop();
}

// void check_sona() {
//   // Check the state of obstacles
//   bool isFrontObstacle = ObstacleFront();

//   if (isFrontObstacle()) {
//     Serial.println("obstacle detected");
//     turnRightDegrees(65);

//     delay(1000);
//     pid_obstacle();


//     delay(300);
//     travelUntilLeftClear1();
//     delay(300);
//     turnLeftDegrees(65);
//     }   
// }


    //     /\_____/\
    //    /  o     o  \   // Cat's eyes and face
    //   ( ==  ^  == )  // The cat's nose and expression
    //    )           (   // Cheeks
    //   (             )  // Chin
    //  ( (  )     (  ) )  // Paws
    // (__(__)___(__)__)  // Body and tail

void loop() {
  switch (currentState) {
      case LineFollowing:
          pid_line_follow();
          break;
          Serial.println("Follow the line");

      case AvoidObstacle:
          checkAvoidObstacleState();
          break;
          Serial.println("Obstacle State");

    }
}

// void checkNormalState() {
//     Serial.println("Loop is running."); // This will print repeatedly

//     // Move forward at a specified speed
//     moveForward(55);
    
//     // Check for obstacles in front
//     if (ObstacleFront()) {
//         Serial.println("Obstacle detected, switching to AvoidObstacle state.");
//         currentState = AvoidObstacle;  // Transition to avoid obstacle state
//     }
// }

void checkAvoidObstacleState() {
    // Turn right to avoid the obstacle
    turnRightDegrees(65);
    delay(1000);  // Allow time for the turn

    // Call PID controller to adjust left and right motors based on sonar readings
    read_sona_values();  // This function will handle PID adjustments

    // Check again for obstacles after adjustment
    if (!ObstacleFront()) {
        currentState = LineFollowing;  // Return to normal state if no obstacles are detected
    }
}


float get_front_distance(){
  float distance = frontSonar.dist();
  if (distance == 0.0) {
    distance = 200.0;
    
  }
  return distance; 
  
}

float get_left_distance(){
  float distance = leftSonar.dist();
  if (distance == 0.0) {
    distance = 200.0;
    
  }
  return distance; 
  
}

float get_right_distance(){
  float distance = rightSonar.dist();
  if (distance == 0.0) {
    distance = 200.0;
    
  }
  return distance; 
  
}

bool ObstacleFront() {
  long distance = get_front_distance();
  return distance < obstacleThreshold; // Return true if obstacle is detected
}

void stop() {
    digitalWrite(inL1, LOW);
    digitalWrite(inL2, LOW);
    digitalWrite(inR1, LOW);
    digitalWrite(inR2, LOW);
    delay(500);
}

void moveForward(int speed) {
    leftEnCount = 0;
    rightEnCount = 0;

    analogWrite(enR, speed);
    int motor_L_speed = speed + K * (rightEnCount - leftEnCount);
    motor_L_speed = constrain(motor_L_speed, 0, 255); // Ensure PWM is in valid range
    analogWrite(enL, motor_L_speed);
    
    digitalWrite(inL1, HIGH);
    digitalWrite(inL2, LOW);
    digitalWrite(inR1, LOW);
    digitalWrite(inR2, HIGH);
  
}

void turnRight(int speed){
  leftEnCount = 0;
    rightEnCount = 0;
    const int turnWeight = 1;
    analogWrite(enR, speed);

    int motor_L_speed = turnWeight * speed + K * (turnWeight * rightEnCount - leftEnCount);
    motor_L_speed = constrain(motor_L_speed, 0, 255); // Ensure PWM is in valid range
    analogWrite(enL, motor_L_speed);
        digitalWrite(inL1, HIGH);
        digitalWrite(inL2, LOW);
        digitalWrite(inR1, HIGH);
        digitalWrite(inR2, LOW);
}

void turnRightDegrees(float degrees) {
    // Reset encoder counters
    
  
    // Get the starting angle
    float startAngle = getCurrentYaw();
    Serial.println(startAngle);
    float targetAngle = startAngle + degrees; // Target angle is current + desired degrees
    //if targetAngle > 360 => then minus 360 
    if (targetAngle > 360){
      targetAngle = targetAngle - 360; 
      while ((getCurrentYaw() >= startAngle && getCurrentYaw() <= 360)  || (getCurrentYaw() >= 0 && getCurrentYaw() < targetAngle) ){
          turnRight(150);        
        }
      
    } else{
        
    // Turn until the target angle is reached or timeout
    while (getCurrentYaw() < targetAngle) {
        // Print the current yaw angle
//        Serial.print("Current Yaw Angle: ");
//        Serial.println(getCurrentYaw());
       turnRight(100);
    }
    }
    stop();

}

void turnLeft(int speed){
//  leftEnCount = 0;
//    rightEnCount = 0;
//    const int turnWeight = 2;
//    analogWrite(enL, speed);
//
////    int motor_R_speed = turnWeight * speed + K * (turnWeight * leftEnCount - rightEnCount);
////    motor_R_speed = constrain(motor_R_speed, 0, 255); // Ensure PWM is in valid range
//    int motor_R_speed = 100;
    analogWrite(enR, 100);
    analogWrite(enL, 100);
    digitalWrite(inL1, LOW);
    digitalWrite(inL2, HIGH);
    digitalWrite(inR1, LOW);
    digitalWrite(inR2, HIGH);
}

void turnLeftDegrees(float degrees) {    
  
    // Get the starting angle
    float startAngle = getCurrentYaw();
    Serial.println(startAngle);
    float targetAngle =  startAngle - degrees; // Target angle is current + desired degrees
        Serial.println(targetAngle);
        turnLeft(50);
    //if targetAngle > 360 => then minus 360 
    if (targetAngle < 0 ){
      targetAngle = targetAngle + 360; 
      while ((getCurrentYaw() <= startAngle && getCurrentYaw() >= 0)  || (getCurrentYaw() >= targetAngle && getCurrentYaw() <= 360) ){
          turnLeft(50);        
        }
      
    } else{
      Serial.println("hehe");
        
    // Turn until the target angle is reached or timeout
    while (getCurrentYaw() > targetAngle) {
        // Print the current yaw angle
//        Serial.print("Current Yaw Angle: ");
//        Serial.println(getCurrentYaw());
       turnLeft(50);
    }
    }
    stop();

}

float getCurrentYaw() {
    sensors_event_t event;
    bno.getEvent(&event);
   
    return event.orientation.x; // Normalize to [0, 360)
}


// void travelUntilLeftClear() {
//         moveForward_encoder(0.3);
//     while (get_left_distance() < 35) {
//         moveForward(70); // Keep moving forward until left sensor is clear
//         Serial.println("left clear");
        
//         delay(100); // Short delay for stability
//     }
//     stop(); // Stop once the left sensor is clear
// }
// void travelUntilLeftClear1() {
//         moveForward_encoder(1.0);
//     while (get_left_distance() < 35) {
//         moveForward(70); // Keep moving forward until left sensor is clear
//         Serial.println("left clear");
        
//         delay(100); // Short delay for stability
//     }
//     stop(); // Stop once the left sensor is clear
// }
// void travelUntilRightClear() {
//     while (get_right_distance() < obstacleThreshold) {
//         moveForward(60); // Keep moving forward until left sensor is clear
//         moveForward_encoder(0.3);
//         delay(80); // Short delay for stability

//     }
//     stop(); // Stop once the left sensor is clear
// }


// Encoder ISR for left motor
void leftEnISR() {
    leftEnCount++;
}

void rightEnISR() {
    rightEnCount++;
}

void moveForward_encoder(float distance_en) {
    int targetCounts = calculateTargetCounts(distance_en);
    leftEnCount = 0; // Reset encoder counts
    rightEnCount = 0;

    // Set direction for moving forward
    digitalWrite(inL1, HIGH);
    digitalWrite(inL2, LOW);
    digitalWrite(inR1, LOW);
    digitalWrite(inR2, HIGH);

    // Start moving forward
    analogWrite(enL, 55);  // Use initial speed
    analogWrite(enR, 55);  // Use initial speed

    // Wait until the robot has moved the target distance
    while (leftEnCount < targetCounts && rightEnCount < targetCounts) {
        // Optionally add obstacle checking code here
    }

    // Stop motors after moving forward
    stop();
}
int calculateTargetCounts(float distance_en) {
    const int encoderCountsPerRevolution = 500; // 1:50 encoder with 7 pulses per revolution
    const float wheelDiameter = 0.0225 * 2; // Diameter of the wheel in meters
    const float wheelCircumference = wheelDiameter * M_PI; // Wheel circumference
    return (distance_en / wheelCircumference) * encoderCountsPerRevolution;
}

void calculate_pid_sona(float error_sona) {
  P_sona = error_sona;
  I_sona += error_sona;
  D_sona = error_sona - previous_error_sona;
  
  PID_value_sona = (Kp_sona * P_sona) + (Ki_sona * I_sona) + (Kd_sona * D_sona);
  PID_value_sona = constrain(PID_value_sona, -255, 255);

  previous_error_sona = error_sona;
}

void motor_control_sona(float PID_value_sona){
    // Calculating the effective motor speed:
  int left_motor_speed = initial_motor_speed + PID_value_sona; 
  int right_motor_speed = initial_motor_speed - PID_value_sona;

  constrain(left_motor_speed,0,255);
  constrain(right_motor_speed,0,255);

  analogWrite(enL, left_motor_speed);  // Set left motor speed
  analogWrite(enR, right_motor_speed); // Set right motor speed

}

void read_sona_values(){
  float currentTime_sona = millis();
    
    // Check if it's time to read new sonar values based on sampling rate
  if (currentTime_sona - previousTime_sona >= sampling_rate_sona) {
      previousTime_sona = currentTime_sona;

      // Get distance values from left and right sonar sensors
      long distanceLeft = get_left_distance();
      long distanceRight = get_right_distance(); 

      // Check if there are obstacles and calculate PID if needed
      if (distanceLeft < safeDistance) {
          float error_sona = 0.8; // Error = difference in distances
          calculate_pid_sona(error_sona); // Call the PID controller with the calculated error
      }
      else if (distanceRight < safeDistance) {
          float error_sona = -0.8; // Error = difference in distances
          calculate_pid_sona(error_sona); // Call the PID controller with the calculated error
      }
    }
}


//PHAN CODE PID FOLLOW THE LINE
//
//                       _oo0oo_
//                      o8888888o
//                      88" . "88
//                      (| -_- |)
//                      0\  =  /0
//                    ___/`---'\___
//                  .' \\|     |// '.
//                 / \\|||  :  |||// \
//                / _||||| -:- |||||- \
//               |   | \\\  -  /// |   |
//               | \_|  ''\---/''  |_/ |
//               \  .-\__  '-'  ___/-. /
//             ___'. .'  /--.--\  `. .'___
//          ."" '<  `.___\_<|>_/___.' >' "".
//         | | :  `- \`.;`\ _ /`;.`/ - ` : | |
//         \  \ `_.   \_ __\ /__ _/   .-` /  /
//     =====`-.____`.___ \_____/___.-`___.-'=====
//                       `=---='
//
//
//     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//  

void pid_line_follow() {
  read_sensor_values();
  motor_control();
}

void read_sensor_values() {
  float currentTime = millis();
  if (currentTime - previousTime >= sampling_rate){
    for (int i = 0; i < 5; i++) {
    sensor[i] = digitalRead(A0 + i); // Assume sensors are connected to A0 to A4
  }
  //phai sang, 1 den don sang 
  if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 0) && (sensor[4] == 0)){ //00100
    error = 0;
     calculate_pid(error);}
  else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 1) && (sensor[4] == 0)){ //00010
    error = 2; 
    calculate_pid(error);}
   else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 0) && (sensor[4] == 1)){ //00001
    error = 4; 
    calculate_pid(error);}
   //phai sang, truong hop 2 den sang
   else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 1) && (sensor[4] == 0)){ //00110
    error = 2; 
    calculate_pid(error);}
   else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 1) && (sensor[4] == 1)){ //00011
    error = 3; 
    calculate_pid(error);}
    else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 1) && (sensor[4] == 1)){ //00101
    error = 3; 
    calculate_pid(error);}

    //trai sang, 1 den don sang
    else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 0) && (sensor[3] == 0) && (sensor[4] == 0)){ //01000
    error = -2; 
    calculate_pid(error);}
    else if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 0) && (sensor[4] == 0)){ //10000
    error = -4; 
    calculate_pid(error);}

    //trai sang, 2 den don sang
     else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 0) && (sensor[4] == 0)){ //01100
    error = -1; 
    calculate_pid(error);}
    else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 0) && (sensor[3] == 0) && (sensor[4] == 0)){ //11000
    error = -3; 
    calculate_pid(error);}
    else if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 0) && (sensor[4] == 0)){ //10100
    error = -3; 
    calculate_pid(error);}

    else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 1) && (sensor[4] == 1)){ //11111
    stop();}
      
    previousTime = currentTime; 
  }
  
   
     
//    if ((error == -4) || (error == -5)) {
//      error = -5;
//      calculate_pid(error);
//      //count = count + 1;
//    } else if ((error == 4) || (error == 5)) {
//      error = 5;
//      calculate_pid(error);
      // count = count + 1;
//    }
//  }

}

void calculate_pid(float error) {
  P = error;
  I += error;
  D = error - previous_error;
  
  PID_value = (Kp * P) + (Ki * I) + (Kd * D);
  previous_error = error;
}

void motor_control() {

  // Calculate the effective motor speed based on PID
  int left_motor_speed = initial_motor_speed + PID_value;
  int right_motor_speed = initial_motor_speed - PID_value;

  // Constrain motor speeds
  left_motor_speed = constrain(left_motor_speed, 0, 150);
  right_motor_speed = constrain(right_motor_speed, 0, 150);

  analogWrite(enL, left_motor_speed);  // Set left motor speed
  analogWrite(enR, right_motor_speed); // Set right motor speed

  Serial.print("Left Speed: "); Serial.print(left_motor_speed);
  Serial.print(" | Right Speed: "); Serial.println(right_motor_speed);
}
